<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>alice</string>
	</array>
	<key>foldingStartMarker</key>
	<string>\b(if|for|per|at|on)\b</string>
	<key>foldingStopMarker</key>
	<string>^\s*(\}|(end if|end for|end at|end on)\b)</string>
	<key>keyEquivalent</key>
	<string>^~S</string>
	<key>name</key>
	<string>Alice</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#macro</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#comments-inline</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#primitive-types</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#list</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#compound-command</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#loop</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#function-definition</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#strings</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#variable</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#pathname</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#constants-and-special-vars</string>
		</dict>		
		<dict>
			<key>include</key>
			<string>#keyword</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#support</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>case-clause</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?=\S)</string>
					<key>end</key>
					<string>;;</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.terminator.case-clause.shell</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.scope.case-clause.shell</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>(\(|(?=\S))</string>
							<key>captures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.case-pattern.shell</string>
								</dict>
							</dict>
							<key>end</key>
							<string>\)</string>
							<key>name</key>
							<string>meta.scope.case-pattern.shell</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>match</key>
									<string>\|</string>
									<key>name</key>
									<string>punctuation.separator.pipe-sign.shell</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#string</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#variable</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#interpolation</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#pathname</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>begin</key>
							<string>(?&lt;=\))</string>
							<key>end</key>
							<string>(?=;;)</string>
							<key>name</key>
							<string>meta.scope.case-clause-body.shell</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>$self</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>primitive-types</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(?:boolean|string|time|number|security|house|volume|value|zeroed|date|percent|price|buyerh|sellerh)\b</string>
					<key>name</key>
					<string>storage.type.primitive.alice</string>
				</dict>
			</array>
		</dict>
		<key>comments-inline</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>/\*</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.alice</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\*/</string>
					<key>name</key>
					<string>comment.block.alice</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>comment.line.double-slash.alice</string>
						</dict>
					</dict>
					<key>match</key>
					<string>\s*((//).*$\n?)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.alice</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?&lt;!\S)(#)(?!\{).*$\n?</string>
					<key>name</key>
					<string>comment.line.number-sign.alice</string>
				</dict>
			</array>
		</dict>
		<key>macro</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.macro.alice</string>
						</dict>
					</dict>
					<key>match</key>
					<string>^#define ([A-Za-z_(),]+)\s+(.*)$</string>
				</dict>
			</array>
		</dict>
		<key>compound-command</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(\[{2})</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.logical-expression.shell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\]{2})</string>
					<key>name</key>
					<string>meta.scope.logical-expression.shell</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#logical-expression</string>
						</dict>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\({2})</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.shell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\){2})</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.shell</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.other.math.shell</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#math</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\()</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.subshell.shell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\))</string>
					<key>name</key>
					<string>meta.scope.subshell.shell</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?&lt;=\s|^)(\{)(?=\s|$)</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.group.shell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?&lt;=^|;)\s*(\})</string>
					<key>name</key>
					<string>meta.scope.group.shell</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>function-definition</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>^function\s+([a-zA-Z0-9_-]+)\s*\((.*)\)\s*[:]*\s*([a-zA-Z]*)\s*$</string>
					<key>beginCaptures</key>
					<dict>						
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.alice</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.arguments.alice</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.alice</string>
						</dict>
					</dict>
					<key>end</key>
					<string>^end.*$</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.function.alice</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.function.alice</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>keyword</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(?:if|else|elif|for|in|continue|return|with)\b</string>
					<key>name</key>
					<string>keyword.control.alice</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;![-/])\b(?:declare|let)\b</string>
					<key>name</key>
					<string>storage.modifier.alice</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(==|!=|&lt;=|&gt;=|&lt;&gt;|&lt;|&gt;)</string>
					<key>name</key>
					<string>keyword.operator.comparison.alice</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(=)</string>
					<key>name</key>
					<string>keyword.operator.assignment.alice</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(or|not|and)\b</string>
					<key>name</key>
					<string>keyword.operator.logical.alice</string>
				</dict>
			</array>
		</dict>
		<key>loop</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\b(for)\s+(?=\({2})</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.alice</string>
						</dict>
					</dict>
					<key>end</key>
					<string>end for</string>
					<key>name</key>
					<string>meta.scope.for-loop.alice</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>\b(for)\s+((?:[^\s\\]|\\.)+)\b</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.shell</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>variable.other.loop.shell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>end for</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.shell</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.scope.for-in-loop.shell</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>\b(while|until)\b</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.shell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\b(done)\b</string>
					<key>name</key>
					<string>meta.scope.while-loop.shell</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>\b(select)\s+((?:[^\s\\]|\\.)+)\b</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.shell</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>variable.other.loop.shell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\b(done)\b</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.shell</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.scope.select-block.shell</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>\b(case)\b</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.shell</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\b(esac)\b</string>
					<key>name</key>
					<string>meta.scope.case-block.shell</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>\b(?:in)\b</string>
							<key>beginCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>keyword.control.shell</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(?=\b(?:esac)\b)</string>
							<key>name</key>
							<string>meta.scope.case-body.shell</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#comment</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#case-clause</string>
								</dict>
								<dict>
									<key>include</key>
									<string>$self</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>\b(if)\b</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.alice</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\b(end if)\b</string>
					<key>name</key>
					<string>meta.scope.if-block.alice</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>strings</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>"</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.alice</string>
						</dict>
					</dict>
					<key>end</key>
					<string>"</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.alice</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.double.alice</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\\.</string>
							<key>name</key>
							<string>constant.character.escape.alice</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>support</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&lt;=^|\s)(?::|\.)(?=\s|;|&amp;|$)</string>
					<key>name</key>
					<string>support.function.builtin.alice</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;![-/])\b(?:false|true|free)\b</string>
					<key>name</key>
					<string>support.function.builtin.alice</string>
				</dict>
			</array>
		</dict>
		<key>variable</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.variable.alice</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(\$)[-*@#?$!0_]</string>
					<key>name</key>
					<string>variable.other.special.alice</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.variable.alice</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(\$)[1-9]</string>
					<key>name</key>
					<string>variable.other.positional.alice</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.variable.alice</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(\$)[a-zA-Z_][a-zA-Z0-9_]*</string>
					<key>name</key>
					<string>variable.other.normal.alice</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>\$\{</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.variable.alice</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\}</string>
					<key>name</key>
					<string>variable.other.bracket.alice</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>!|:[-=?]?|\*|@|#{1,2}|%{1,2}|/</string>
							<key>name</key>
							<string>keyword.operator.expansion.alice</string>
						</dict>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>punctuation.section.array.alice</string>
								</dict>
								<key>3</key>
								<dict>
									<key>name</key>
									<string>punctuation.section.array.alice</string>
								</dict>
							</dict>
							<key>match</key>
							<string>(\[)([^\]]+)(\])</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>constants-and-special-vars</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(true|false|dummy[Nn]umber|dummy[Ss]tring|dummy[Vv]alue|dummy[Vv]olume|dummy[Pp]rice|dummy[Pp]ercent)\b</string>
					<key>name</key>
					<string>constant.language.alice</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\.?[0-9]*)|(\.[0-9]+))((e|E)(\+|-)?[0-9]+)?)([LlFfUuDd]|UL|ul)?\b</string>
					<key>name</key>
					<string>constant.numeric.alice</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.alice</string>
	<key>uuid</key>
	<string>CCDA2A77-ADF6-4F3C-AD72-3B282BA11B2A</string>
</dict>
</plist>
